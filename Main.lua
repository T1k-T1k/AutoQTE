-- QuickTimeEvent Auto Script (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer.PlayerGui

-- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
local isMonitoring = false
local currentConnection = nil
local hookedFunction = nil
local originalCallback = nil

-- –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
local timingHistory = {}
local keySequence = {}

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ RemoteFunction
local function hookRemoteFunction()
    local Event = ReplicatedStorage:WaitForChild("QuickTimeEvent", 10)
    
    if not Event or not Event:IsA("RemoteFunction") then
        warn("[QTE Auto] QuickTimeEvent RemoteFunction –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return false
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π callback
    local success, callback = pcall(function()
        return getcallbackvalue(Event, "OnClientInvoke")
    end)
    
    if not success or not callback then
        warn("[QTE Auto] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π callback")
        return false
    end
    
    originalCallback = callback
    
    -- –°–æ–∑–¥–∞–µ–º –Ω–∞—à hook
    Event.OnClientInvoke = function(...)
        local args = {...}
        local key = args[1]
        local timing = args[2]
        
        print("[QTE Hook] –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –≤—ã–∑–æ–≤:")
        print("  –ö–ª–∞–≤–∏—à–∞:", key)
        print("  –¢–∞–π–º–∏–Ω–≥:", timing)
        print("  –í—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:", unpack(args))
        
        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        table.insert(timingHistory, {
            key = key,
            timing = timing,
            timestamp = tick(),
            args = args
        })
        
        -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if #timingHistory > 50 then
            table.remove(timingHistory, 1)
        end
        
        -- –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π callback
        if originalCallback then
            return originalCallback(unpack(args))
        end
    end
    
    print("[QTE Auto] RemoteFunction —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö—É–∫–∞–Ω–∞")
    return true
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ç–∞–π–º–∏–Ω–≥–∞
local function analyzeTiming(key)
    local relevantTimings = {}
    
    -- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–∞–π–º–∏–Ω–≥–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏—à–∏
    for _, record in ipairs(timingHistory) do
        if record.key == key then
            table.insert(relevantTimings, record.timing)
        end
    end
    
    if #relevantTimings == 0 then
        -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for _, record in ipairs(timingHistory) do
            table.insert(relevantTimings, record.timing)
        end
    end
    
    if #relevantTimings == 0 then
        return 1.5 -- –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    end
    
    -- –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    local sum = 0
    for _, timing in ipairs(relevantTimings) do
        sum = sum + timing
    end
    
    local average = sum / #relevantTimings
    print("[QTE Analysis] –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", #relevantTimings, "–∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–ª–∞–≤–∏—à–∏", key)
    print("[QTE Analysis] –°—Ä–µ–¥–Ω–∏–π —Ç–∞–π–º–∏–Ω–≥:", average)
    
    return average
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∞–π–º–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ RemoteFunction
local function detectTiming(key)
    -- –ú–µ—Ç–æ–¥ 1: –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    local predictedTiming = analyzeTiming(key)
    
    -- –ú–µ—Ç–æ–¥ 2: –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–≥—Ä—ã
    local currentTime = tick()
    
    -- –ò—â–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    local recentEvents = {}
    for _, record in ipairs(timingHistory) do
        if currentTime - record.timestamp < 10 then -- –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
            table.insert(recentEvents, record)
        end
    end
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
    if #recentEvents >= 2 then
        local intervals = {}
        for i = 2, #recentEvents do
            local interval = recentEvents[i].timestamp - recentEvents[i-1].timestamp
            table.insert(intervals, interval)
        end
        
        -- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–∞–π–º–∏–Ω–≥
        local avgInterval = 0
        for _, interval in ipairs(intervals) do
            avgInterval = avgInterval + interval
        end
        avgInterval = avgInterval / #intervals
        
        print("[QTE Analysis] –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏:", avgInterval)
        
        -- –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if avgInterval < 3 then
            predictedTiming = math.min(predictedTiming, avgInterval * 0.8)
        end
    end
    
    -- –ú–µ—Ç–æ–¥ 3: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    local networkDelay = 0.05 -- –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–µ—Ç–∏
    predictedTiming = math.max(0.1, predictedTiming - networkDelay)
    
    return predictedTiming
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
local function getButtonText(button)
    if button and button:IsA("GuiObject") then
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        if button:FindFirstChild("TextLabel") then
            return button.TextLabel.Text
        elseif button.Text and button.Text ~= "" then
            return button.Text
        elseif button:FindFirstChild("Text") then
            return button.Text.Text
        end
        
        -- –ò—â–µ–º –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        for _, child in ipairs(button:GetChildren()) do
            if child:IsA("TextLabel") or child:IsA("TextButton") then
                if child.Text and child.Text ~= "" then
                    return child.Text
                end
            end
        end
    end
    return nil
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è QTE
local function executeQTE(key, customTiming)
    local Event = ReplicatedStorage:FindFirstChild("QuickTimeEvent")
    if not Event or not Event:IsA("RemoteFunction") then
        warn("[QTE Auto] RemoteFunction –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        return false
    end
    
    local timing = customTiming or detectTiming(key)
    
    print("[QTE Auto] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ QTE:")
    print("  –ö–ª–∞–≤–∏—à–∞:", key)
    print("  –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ç–∞–π–º–∏–Ω–≥:", timing)
    
    -- –í—ã–ø–æ–ª–Ω—è–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    spawn(function()
        wait(0.02)
        
        local success, result = pcall(function()
            if originalCallback then
                return originalCallback(key, timing)
            else
                -- Fallback –º–µ—Ç–æ–¥
                local Callback = getcallbackvalue(Event, "OnClientInvoke")
                return Callback(key, timing)
            end
        end)
        
        if success then
            print("[QTE Auto] ‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ QTE –¥–ª—è –∫–ª–∞–≤–∏—à–∏:", key)
            
            -- –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø–µ—Ö–∞
            table.insert(keySequence, {
                key = key,
                timing = timing,
                success = true,
                timestamp = tick()
            })
        else
            warn("[QTE Auto] ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è QTE:", result)
        end
    end)
    
    return true
end

-- –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–Ω–æ–ø–æ–∫ –≤ GUI
local function monitorButton(qteGui)
    if currentConnection then
        currentConnection:Disconnect()
    end
    
    local lastButtonText = ""
    local buttonAppearTime = 0
    
    currentConnection = RunService.Heartbeat:Connect(function()
        local button = qteGui:FindFirstChild("Button")
        
        if button and button.Visible then
            local buttonText = getButtonText(button)
            
            if buttonText and buttonText ~= "" and buttonText ~= lastButtonText then
                lastButtonText = buttonText
                buttonAppearTime = tick()
                
                print("[QTE Monitor] üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞:", buttonText)
                
                -- –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ GUI
                wait(0.1)
                
                -- –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–π–º–∏–Ω–≥ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º QTE
                executeQTE(buttonText)
                
                -- –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
                spawn(function()
                    while button and button.Visible and button.Parent do
                        wait(0.1)
                    end
                    lastButtonText = ""
                end)
            end
        else
            lastButtonText = ""
        end
    end)
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
local function startMonitoring()
    if isMonitoring then
        print("[QTE Auto] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
        return
    end
    
    print("[QTE Auto] üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ QTE...")
    
    -- –°–Ω–∞—á–∞–ª–∞ —Ö—É–∫–∞–µ–º RemoteFunction
    if not hookRemoteFunction() then
        warn("[QTE Auto] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö—É–∫–∞—Ç—å RemoteFunction")
        return
    end
    
    isMonitoring = true
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ GUI
    local qteGui = PlayerGui:FindFirstChild("QuickTimeEvent")
    if qteGui then
        print("[QTE Auto] –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π QuickTimeEvent GUI")
        monitorButton(qteGui)
    end
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö GUI
    PlayerGui.ChildAdded:Connect(function(child)
        if child.Name == "QuickTimeEvent" and isMonitoring then
            print("[QTE Auto] üì• –ù–æ–≤—ã–π QuickTimeEvent GUI –¥–æ–±–∞–≤–ª–µ–Ω")
            wait(0.2) -- –î–∞–µ–º –≤—Ä–µ–º—è GUI –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
            monitorButton(child)
        end
    end)
    
    print("[QTE Auto] ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
end

-- –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
local function stopMonitoring()
    isMonitoring = false
    
    if currentConnection then
        currentConnection:Disconnect()
        currentConnection = nil
    end
    
    -- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π callback –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    if originalCallback then
        local Event = ReplicatedStorage:FindFirstChild("QuickTimeEvent")
        if Event and Event:IsA("RemoteFunction") then
            Event.OnClientInvoke = originalCallback
        end
    end
    
    print("[QTE Auto] üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
local function getStats()
    print("[QTE Stats] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print("  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏:", #timingHistory)
    print("  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–±—ã—Ç–∏–π:")
    
    for i = math.max(1, #timingHistory - 4), #timingHistory do
        local record = timingHistory[i]
        print(string.format("    %d. –ö–ª–∞–≤–∏—à–∞: %s, –¢–∞–π–º–∏–Ω–≥: %.2f", i, record.key, record.timing))
    end
end

-- –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
_G.QTEAuto = {
    start = startMonitoring,
    stop = stopMonitoring,
    isRunning = function() return isMonitoring end,
    getStats = getStats,
    executeManual = executeQTE,
    getHistory = function() return timingHistory end
}

-- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
print("=== QuickTimeEvent Auto Script ===")
print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
print("  _G.QTEAuto.start() - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
print("  _G.QTEAuto.stop() - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
print("  _G.QTEAuto.getStats() - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
print("  _G.QTEAuto.executeManual('E', 1.5) - —Ä—É—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")

-- –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
startMonitoring()
