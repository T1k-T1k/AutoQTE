-- QuickTimeEvent Auto Script (VirtualInputManager –≤–µ—Ä—Å–∏—è)
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer.PlayerGui

-- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
local isMonitoring = false
local currentConnection = nil
local qteStartTimes = {} -- –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ QTE
local processedButtons = {} -- –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ RemoteFunction –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–π–º–∏–Ω–≥–∞
local function hookRemoteFunction()
    local Event = ReplicatedStorage:WaitForChild("QuickTimeEvent", 10)
    
    if not Event or not Event:IsA("RemoteFunction") then
        warn("[QTE Auto] QuickTimeEvent RemoteFunction –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return false
    end
    
    -- –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–∑–æ–≤—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–π–º–∏–Ω–≥–∞
    local originalCallback = getcallbackvalue(Event, "OnClientInvoke")
    
    if not originalCallback then
        warn("[QTE Auto] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π callback")
        return false
    end
    
    -- –•—É–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–∞–π–º–∏–Ω–≥–∞, –ù–ï –∑–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    local hookedCallback = function(...)
        local args = {...}
        local key = args[1]
        local timing = args[2]
        
        print("[QTE Hook] –ò–≥—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞:")
        print("  –ö–ª–∞–≤–∏—à–∞:", key)  
        print("  –¢—Ä–µ–±—É–µ–º—ã–π —Ç–∞–π–º–∏–Ω–≥:", timing)
        print("  –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:", tick())
        
        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–∏–Ω–≥–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if key and timing then
            qteStartTimes[key] = {
                requiredTiming = timing,
                eventTime = tick(),
                processed = false
            }
        end
        
        -- –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return originalCallback(...)
    end
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–µ—Ç–µ–≤—ã–µ –≤—ã–∑–æ–≤—ã (–Ω–µ –∑–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
    local mt = getrawmetatable(Event)
    local oldNewIndex = mt.__newindex
    
    setrawmetatable(Event, setmetatable({}, {
        __index = mt,
        __newindex = function(self, key, value)
            if key == "OnClientInvoke" and value ~= hookedCallback then
                print("[QTE Hook] –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π callback, –æ–±–Ω–æ–≤–ª—è–µ–º hook...")
                -- –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à hook
                originalCallback = value
            end
            return oldNewIndex(self, key, value)
        end
    }))
    
    print("[QTE Auto] RemoteFunction hook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    return true
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
local function getButtonText(button)
    if not button or not button:IsA("GuiObject") then
        return nil
    end
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    local textSources = {
        button.Text,
        button:FindFirstChild("TextLabel") and button.TextLabel.Text,
        button:FindFirstChild("Text") and button.Text.Text
    }
    
    for _, text in ipairs(textSources) do
        if text and text ~= "" and string.len(text) == 1 then
            return string.upper(text)
        end
    end
    
    -- –ò—â–µ–º –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    for _, child in ipairs(button:GetDescendants()) do
        if child:IsA("TextLabel") or child:IsA("TextButton") then
            local text = child.Text
            if text and text ~= "" and string.len(text) == 1 then
                return string.upper(text)
            end
        end
    end
    
    return nil
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ —á–µ—Ä–µ–∑ VirtualInputManager
local function pressKey(key, delay)
    spawn(function()
        if delay and delay > 0 then
            wait(delay)
        end
        
        print("[QTE Auto] üéØ –ù–∞–∂–∏–º–∞–µ–º –∫–ª–∞–≤–∏—à—É:", key, "—á–µ—Ä–µ–∑", delay or 0, "—Å–µ–∫—É–Ω–¥")
        
        -- –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏—à—É –≤ KeyCode
        local keyCode = Enum.KeyCode[key]
        if not keyCode then
            -- –ü—ã—Ç–∞–µ–º—Å—è —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
            local keyMappings = {
                ["E"] = Enum.KeyCode.E,
                ["Q"] = Enum.KeyCode.Q,
                ["W"] = Enum.KeyCode.W,
                ["A"] = Enum.KeyCode.A,
                ["S"] = Enum.KeyCode.S,
                ["D"] = Enum.KeyCode.D,
                ["X"] = Enum.KeyCode.X,
                ["Z"] = Enum.KeyCode.Z,
                ["C"] = Enum.KeyCode.C,
                ["F"] = Enum.KeyCode.F,
                ["R"] = Enum.KeyCode.R,
                ["T"] = Enum.KeyCode.T,
                ["SPACE"] = Enum.KeyCode.Space,
                [" "] = Enum.KeyCode.Space
            }
            keyCode = keyMappings[key]
        end
        
        if keyCode then
            -- –ù–∞–∂–∏–º–∞–µ–º –∫–ª–∞–≤–∏—à—É
            VirtualInputManager:SendKeyEvent(true, keyCode, false, game)
            wait(0.05) -- –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏–µ–º –∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ–º
            VirtualInputManager:SendKeyEvent(false, keyCode, false, game)
            
            print("[QTE Auto] ‚úÖ –ö–ª–∞–≤–∏—à–∞", key, "–Ω–∞–∂–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
        else
            warn("[QTE Auto] ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–ª–∞–≤–∏—à–∞:", key)
        end
    end)
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∫–Ω–æ–ø–∫–∏
local function getButtonId(button, text)
    return tostring(button) .. "_" .. text .. "_" .. tick()
end

-- –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–Ω–æ–ø–æ–∫
local function monitorQTEGui(qteGui)
    if currentConnection then
        currentConnection:Disconnect()
    end
    
    local lastProcessedId = ""
    
    currentConnection = RunService.Heartbeat:Connect(function()
        local button = qteGui:FindFirstChild("Button")
        
        if button and button.Visible then
            local buttonText = getButtonText(button)
            
            if buttonText and buttonText ~= "" then
                local buttonId = getButtonId(button, buttonText)
                
                -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É
                if buttonId ~= lastProcessedId and not processedButtons[buttonId] then
                    lastProcessedId = buttonId
                    processedButtons[buttonId] = true
                    
                    print("[QTE Monitor] üîç –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞:", buttonText)
                    
                    -- –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–∏–Ω–≥–µ
                    local qteInfo = qteStartTimes[buttonText]
                    local currentTime = tick()
                    
                    if qteInfo and not qteInfo.processed then
                        local requiredTiming = qteInfo.requiredTiming
                        local eventStartTime = qteInfo.eventTime
                        local timeSinceStart = currentTime - eventStartTime
                        
                        -- –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å (—É—á–∏—Ç—ã–≤–∞–µ–º —É–∂–µ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è)
                        local pressDelay = math.max(0, requiredTiming - timeSinceStart - 0.05) -- -0.05 –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
                        
                        print("[QTE Auto] ‚è±Ô∏è –†–∞—Å—á–µ—Ç —Ç–∞–π–º–∏–Ω–≥–∞:")
                        print("  –¢—Ä–µ–±—É–µ–º—ã–π —Ç–∞–π–º–∏–Ω–≥:", requiredTiming)
                        print("  –í—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è:", timeSinceStart)
                        print("  –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ –Ω–∞–∂–∞—Ç–∏—è:", pressDelay)
                        
                        -- –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                        qteInfo.processed = true
                        
                        -- –ù–∞–∂–∏–º–∞–µ–º –∫–ª–∞–≤–∏—à—É —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                        pressKey(buttonText, pressDelay)
                    else
                        -- –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–º–∏–Ω–≥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                        local defaultDelay = 1.0
                        print("[QTE Auto] ‚ö†Ô∏è –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–º–∏–Ω–≥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É:", defaultDelay)
                        pressKey(buttonText, defaultDelay)
                    end
                    
                    -- –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                    spawn(function()
                        wait(5)
                        processedButtons[buttonId] = nil
                    end)
                end
            end
        end
    end)
    
    print("[QTE Auto] üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GUI –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
local function startMonitoring()
    if isMonitoring then
        print("[QTE Auto] ‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return
    end
    
    print("[QTE Auto] üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à...")
    
    -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hook –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ RemoteFunction
    if not hookRemoteFunction() then
        warn("[QTE Auto] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å hook")
        return
    end
    
    isMonitoring = true
    
    -- –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    qteStartTimes = {}
    processedButtons = {}
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π GUI
    local qteGui = PlayerGui:FindFirstChild("QuickTimeEvent")
    if qteGui then
        print("[QTE Auto] üì± –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π QuickTimeEvent GUI")
        monitorQTEGui(qteGui)
    end
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –Ω–æ–≤—ã–µ GUI
    PlayerGui.ChildAdded:Connect(function(child)
        if child.Name == "QuickTimeEvent" and isMonitoring then
            print("[QTE Auto] üì• –ù–æ–≤—ã–π QuickTimeEvent GUI –ø–æ—è–≤–∏–ª—Å—è")
            wait(0.1) -- –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            monitorQTEGui(child)
        end
    end)
    
    print("[QTE Auto] ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞! –ë—É–¥–µ—Ç –Ω–∞–∂–∏–º–∞—Ç—å –∫–ª–∞–≤–∏—à–∏ –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç")
end

-- –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
local function stopMonitoring()
    isMonitoring = false
    
    if currentConnection then
        currentConnection:Disconnect()
        currentConnection = nil
    end
    
    -- –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    qteStartTimes = {}
    processedButtons = {}
    
    print("[QTE Auto] üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
local function testKeyPress(key)
    print("[QTE Test] üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏:", key)
    pressKey(key, 0)
end

-- –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
local function getStats()
    print("[QTE Stats] üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print("  –ê–∫—Ç–∏–≤–µ–Ω:", isMonitoring)
    print("  –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ–±—ã—Ç–∏–π:", #qteStartTimes)
    print("  –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫:", #processedButtons)
    
    if next(qteStartTimes) then
        print("  –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
        for key, info in pairs(qteStartTimes) do
            print(string.format("    %s: —Ç–∞–π–º–∏–Ω–≥=%.2f, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ=%s", 
                key, info.requiredTiming, tostring(info.processed)))
        end
    end
end

-- –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
_G.QTEAuto = {
    start = startMonitoring,
    stop = stopMonitoring,
    isRunning = function() return isMonitoring end,
    testKey = testKeyPress,
    getStats = getStats
}

-- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
print("=== QuickTimeEvent Auto Clicker ===")
print("üéÆ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∂–∏–º–∞–µ—Ç –∫–ª–∞–≤–∏—à–∏ –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç")
print("")
print("üìã –ö–æ–º–∞–Ω–¥—ã:")
print("  _G.QTEAuto.start() - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–Ω–∞–∂–∞—Ç–∏–µ")
print("  _G.QTEAuto.stop() - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å") 
print("  _G.QTEAuto.testKey('E') - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏—à—É")
print("  _G.QTEAuto.getStats() - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
print("")

-- –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
startMonitoring()
